package back;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import javax.swing.JOptionPane;
import javax.swing.JTextArea;

import front.ServerGUI;

public class ServerBack {

	public static final int PORT = 9091;

	public ServerSocket serverSocket = null;;
	public Socket socket;

	private ServerGUI sGui;
	private String msg;
	private String whisper;
	private String nick = null;
	private String receiver;
	
	private int begin, end;
	private Set<String> key1;
	private String recenick;
	// 사용자들의 정보를 저장하는 맵
	private Map<String, DataOutputStream> clientMap = new HashMap<String, DataOutputStream>();

	public void setGui(ServerGUI gui) {
		this.sGui = gui;
	}

	// 사용자 접속을 기다리는 스레드
	public void ServerSetting() {
		/*
		 * 서버 역할 : 방문자를 계속 받아 , 쓰레드 리시버를 계속 생성
		 */
		try {
			Collections.synchronizedMap(clientMap);// clientMap 을 네트워크 처리
			serverSocket = new ServerSocket(PORT);
			sGui.txtHistory.append("Server preparing....\r\n");
			sGui.txtHistory.append("Client Waiting ....\r\n");
			while (true) {
				socket = serverSocket.accept();
				// 새로운 사용자 스레드 클래스를 생성하여 소켓 정보 입력
				Receiver receiver = new Receiver(socket);
				receiver.start();
			}
		} catch (Exception e) {
			JOptionPane.showMessageDialog(sGui, "서버 구동 실패");
		}
	}// serversetting

	class Receiver extends Thread {

		private DataInputStream dis;
		private DataOutputStream dos;
		private String nick;
		private int begin, end;
		private Set<String> key1;
		private String recenick;
		
		public Receiver(Socket socket) {
			try {
				dos = new DataOutputStream(socket.getOutputStream());
				dis = new DataInputStream(socket.getInputStream());
				nick = dis.readUTF();
				addClient(nick, dos);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}// 생성

		@Override
		public void run() {
			try {
				while (dis != null) {
					sGui.txtHistory.append("Receiver run에서 받음 \r\n");
					msg = dis.readUTF();
					if (msg.contains("/w")) {
						whisper = msg;
						sGui.appendMsg(msg);
						begin = whisper.indexOf(" ")+1;
						end = whisper.indexOf(" ",begin);
						receiver = whisper.substring(begin, end).trim();
						whisper = whisper.substring(end+1).trim();
						System.out.println("begin : "+begin);
						System.out.println("end : "+end);
						System.out.println("receiver : "+receiver);
						System.out.println("whisper : "+whisper);
						key1 = clientMap.keySet();
						unicast(whisper);
						
					}//if 
					else{
						sendMessage(msg);
						sGui.appendMsg(msg);
					}//else
				}//while
			} catch (Exception e) {
				removeClient(nick);
			} finally {
				autoScroll(sGui.txtHistory);
			}
		}
	}//////////// run

	public ActionListener listener = new ActionListener() {
		@Override
		public void actionPerformed(ActionEvent e) {
			String msg = "서버 공지사항 : " + sGui.txtMessage.getText() + "\n";
			try {
				
				sendMessage(msg);
				sGui.appendMsg(msg);
			} catch (Exception e1) {
				// ※연결된 소켓에 데이타 쓸때 소켓이 끊어지면
				// 즉 클라이언트가 나가면 예외발생.
				sGui.txtHistory.append("연결이 끊어졌어요\r\n");
			} finally {
				autoScroll(sGui.txtHistory);
				// 텍스트 클리어
				sGui.txtMessage.setText("");
				// 포커스를 다시 메시지 입력창으로 가져오기
				sGui.txtMessage.requestFocus();
			}
			// if
		}// actionPerformed
	};

	// 클라이언트 저장
	public void addClient(String nick, DataOutputStream dos) {
		String message = nick + "님이 접속하셨습니다.\n";
		sendMessage(message);
		sGui.appendMsg(message);
		clientMap.put(nick, dos);
	}// addClient

	// 클라이언트 삭제
	public void removeClient(String nick) {
		String message = nick + "님이 나가셨습니다\n";
		sendMessage(message);
		sGui.appendMsg(message);
		clientMap.remove(nick);
	}// removeClient

	// 메세지 내용 전파
	public void sendMessage(String msg) {
		Iterator<String> iterator = clientMap.keySet().iterator();
		String key = "";

		while (iterator.hasNext()) {
			key = iterator.next();// 반복자에서 하나하나 키를 빼온다.
			try {
				clientMap.get(key).writeUTF(msg);

			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}// sendMessage

	public static void autoScroll(JTextArea textArea) {
		// 텍스트에리어의 모든 텍스트 길이 얻기
		int length = textArea.getText().length();
		// 텍스트 끝에 캐롯 추가
		textArea.setCaretPosition(length);
		// 텍스트에리어에 포커스 주기
		textArea.requestFocus();
	}/////////// autoScroll

	public void unicast(String msg) {
		
		Receiver rece = (Receiver) clientMap;
		key1 = clientMap.keySet();
		for(Object key : key1) {
			System.out.println("들어있는 값 key 값 "+key);
			if(key.equals(receiver)) {
				recenick = key.toString();
				try {
					clientMap.get(recenick).writeUTF(msg);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}//if
		}//for
		
	}//unicast
	public static void main(String[] args) {
		ServerBack serverEnd = new ServerBack();
		serverEnd.ServerSetting();
	}// main

}// class
